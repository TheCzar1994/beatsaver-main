<dataConfig>
    <dataSource type="JdbcDataSource" driver="org.postgresql.Driver" url="jdbc:postgresql://db:5432/beatmaps" user="beatmaps" password="insecure-password"></dataSource>
    <document>
        <entity pk="hexid" name="Beatmaps"
                query="
                    SELECT b.&quot;mapId&quot; id, to_hex(b.&quot;mapId&quot;) hexid, SUBSTRING(b.name, 0, 2000)::varchar name, SUBSTRING(b.description, 0, 10000)::varchar description, b.&quot;levelAuthorName&quot;::varchar,
                        u.&quot;uniqueName&quot;::varchar, b.&quot;createdAt&quot;, b.uploaded, b.&quot;updatedAt&quot;, b.&quot;deletedAt&quot;, b.&quot;curatedAt&quot;, b.score, u.&quot;verifiedMapper&quot;,
                        b.uploader, ARRAY_TO_STRING(b.tags, ',') tagstr, STRING_AGG(d.nps::varchar, ',') npsstr, b.&quot;fullSpread&quot;, ARRAY_TO_STRING(array_merge_agg(d.suggestions), '||') suggestions,
                        ARRAY_TO_STRING(array_merge_agg(d.requirements), '||') requirements, b.ranked rankedss, b.&quot;blRanked&quot; rankedbl, b.&quot;declaredAi&quot; != 'None' ai, b.bpm, b.duration, b.&quot;curatedBy&quot;,
                        ARRAY_TO_STRING(array_merge(ARRAY_AGG(c.&quot;collaboratorId&quot;), ARRAY[b.uploader]), ',') collaborators
                    FROM beatmap b JOIN uploader u ON b.uploader = u.id JOIN versions v ON b.&quot;mapId&quot; = v.&quot;mapId&quot; AND v.state = 'Published' JOIN difficulty d ON v.&quot;versionId&quot; = d.&quot;versionId&quot;
                        LEFT JOIN collaboration c ON b.&quot;mapId&quot; = c.&quot;mapId&quot; AND c.accepted
                        WHERE b.&quot;deletedAt&quot; IS NULL GROUP BY b.&quot;mapId&quot;, u.id"
                deltaQuery="SELECT &quot;mapId&quot; id, to_hex(&quot;mapId&quot;) hexid FROM beatmap WHERE &quot;deletedAt&quot; IS NULL AND &quot;updatedAt&quot; >= '${dataimporter.last_index_time}'"
                deltaImportQuery="
                    SELECT b.&quot;mapId&quot; id, to_hex(b.&quot;mapId&quot;) hexid, SUBSTRING(b.name, 0, 2000)::varchar name, SUBSTRING(b.description, 0, 10000)::varchar description, b.&quot;levelAuthorName&quot;::varchar, u.&quot;uniqueName&quot;::varchar,
                        b.&quot;createdAt&quot;, b.uploaded, b.&quot;updatedAt&quot;, b.&quot;deletedAt&quot;, b.&quot;curatedAt&quot;, b.score, u.&quot;verifiedMapper&quot;, b.uploader,
                        ARRAY_TO_STRING(b.tags, ',') tagstr, STRING_AGG(d.nps::varchar, ',') npsstr, b.&quot;fullSpread&quot;, ARRAY_TO_STRING(array_merge_agg(d.suggestions), '||') suggestions,
                        ARRAY_TO_STRING(array_merge_agg(d.requirements), '||') requirements, b.ranked rankedss, b.&quot;blRanked&quot; rankedbl, b.&quot;declaredAi&quot; != 'None' ai, b.bpm, b.duration, b.&quot;curatedBy&quot;,
                        ARRAY_TO_STRING(array_merge(ARRAY_AGG(c.&quot;collaboratorId&quot;), ARRAY[b.uploader]), ',') collaborators
                    FROM beatmap b JOIN uploader u ON b.uploader = u.id JOIN versions v ON b.&quot;mapId&quot; = v.&quot;mapId&quot; AND v.state = 'Published' JOIN difficulty d ON v.&quot;versionId&quot; = d.&quot;versionId&quot;
                        LEFT JOIN collaboration c ON b.&quot;mapId&quot; = c.&quot;mapId&quot; AND c.accepted
                        WHERE b.&quot;mapId&quot; = ${dataimporter.delta.id} GROUP BY b.&quot;mapId&quot;, u.id"
                deletedPkQuery="
                    SELECT to_hex(b.&quot;mapId&quot;) hexid FROM beatmap b
                        LEFT JOIN versions v ON b.&quot;mapId&quot; = v.&quot;mapId&quot; AND v.state = 'Published'
                    WHERE b.&quot;deletedAt&quot; > '${dataimporter.last_index_time}' OR (b.&quot;updatedAt&quot; > '${dataimporter.last_index_time}' AND v.&quot;mapId&quot; IS NULL)"
                transformer="RegexTransformer"
        >

            <field column="id" name="id"></field>
            <field column="hexid" name="mapId"></field>
            <field column="name" name="name"></field>
            <field column="description" name="description"></field>
            <field column="levelAuthorName" name="author"></field>
            <field column="uniqueName" name="mapper"></field>
            <field column="createdAt" name="created"></field>
            <field column="uploaded" name="uploaded"></field>
            <field column="updatedAt" name="updated"></field>
            <field column="deletedAt" name="deleted"></field>
            <field column="curatedAt" name="curated"></field>
            <field column="curatedBy" name="curatorId"></field>
            <field column="score" name="voteScore"></field>
            <field column="bpm" name="bpm"></field>
            <field column="duration" name="duration"></field>
            <field column="verifiedMapper" name="verified"></field>
            <field column="uploader" name="mapperId"></field>
            <field column="collaborators" splitBy="," name="mapperIds"></field>
            <field column="tagstr" splitBy="," name="tags"></field>
            <field column="npsstr" splitBy="," name="nps"></field>
            <field column="suggestions" splitBy="\|\|" name="suggestions"></field>
            <field column="requirements" splitBy="\|\|" name="requirements"></field>
            <field column="fullSpread" name="fullSpread"></field>
            <field column="rankedss" name="rankedss"></field>
            <field column="rankedbl" name="rankedbl"></field>
            <field column="ai" name="ai"></field>
        </entity>
    </document>
</dataConfig>
